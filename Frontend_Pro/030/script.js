//! 030_1
/*
Ітератор це патрерн проектування, який дозволяє послідовно отримувати доступ до елементів об'єкта без відкриття його внутрішньої структури.
Ітератори використовуються для перебору елементів колекції, таких як масиви, об'єкти або рядки.
Ітератори визначають послідовності та реалізують протокол ітератора, який повертає об’єкт за допомогою методу next(), 
який має властивості value та done. Де value - це значення елемента, а done - це логічне значення, яке вказує, чи є останнім елементом колекції.
*/


//! 030_2 Створіть власний ітератор для перебору об'єкта, який містить різні типи даних

const myObject = {
    name: 'John',
    age: 30,
    isMarried: false,
    hobbies: ['music', 'movies', 'sports']
};

// myObject[Symbol.iterator] = function () {
//     let i = 0;
//     const values = Object.values(this); //отримуємо масив значень об'єкта

//     return {
//         next() {
//             if (i < values.length) {
//                 return { value: values[i++], done: false };
//             }
//             return { done: true };
//         }
//     }
// }

// for (let val of myObject) {
//     console.log(val);
// }

//  ІНШИЙ СПОСІБ

// let myIterObj = {
//     [Symbol.iterator]() {
//         let i = 0;
//         const values = Object.values(myObject);

//         return {
//             next() {
//                 return (i < values.length)
//                 ? { value: values[i++], done: false }
//                 : { done: true };
//             }
//         }
//     }
// };

// for (let val of myIterObj) {
//     console.log(val);
// }


//!030_3 Розгляньте різницю між циклами for, for .. in та for .. of в JavaScript. Спробуйте зробити висновки, коли краще використовувати кожен з них.

/*
for - проходить через блок коду кілька разів
for/in - перебирає ключі(властивості) об’єкту
for/of - перебирає значення об’єкту, що ітерується

- Відповідно: for використовуємо тоді коли потрібно пройтися по блоку коду кілька разів(наприклад потрібно вивести числа від 1 до 10),
  for/in зручно викор. для обєктів щоб перебрати їх ключі.
  for/of краще викор. для перебору значення ітерабельних обєктів (масиви, рядки, мапи, сети тощо)
*/


//!030_4 Створіть масив різних типів даних (стрічки, числа, об'єкти тощо) і виведіть їх за допомогою циклу for .. of.

// const m = [1, 'sss', true, { a: 1 }, [1, 2, 3]];

// for (let val of m) {
//     console.log(val);
// }

//!030_5 Перепишіть будь-яку функцію, яка використовує цикл for для ітерування по масиву, використовуючи цикл for .. of.

// function printArrElement(arr) {
//     for(let i = 0; i < arr.length; i++){
//         console.log(arr[i])
//     }
// }
// printArrElement([1,2,3,4,5,6,7])

// function printArrElement(array) {
//     for(el of array) {
//         console.log(el)
//     }
// }
// printArrElement([1,2,3,4,5,6,7])

//!030_6 Напишіть функцію, яка приймає на вхід будь-який ітерований об'єкт і виводить його значення за допомогою циклу while.

// function printIterableVal(iterable) {
//     const iterator = iterable[Symbol.iterator](); //створюємо ітератор
//     let res = iterator.next(); //перший елемент

//     while(!res.done) {
//         console.log(res.value);
//         res = iterator.next();
//     }
// }
// printIterableVal([1,2,3,4]);

//!030_7 Створіть власний ітератор, який перебирає всі прості числа в заданому діапазоні. Виведіть перші 10 простих чисел.

function primeNumbersIterator(start, end) {
    let current = start;

    return {
        [Symbol.iterator]() {
            return this;
        },
        next() {
            while (current <= end) {
                if (isPrime(current)) {
                    return { value: current++, done: false };
                }
                current++;
            }
            return { done: true };
        }
    };
}

// функція для перевірки, чи є число простим
function isPrime(num) {
    if (num < 2) return false;
    for (let i = 2; i <= Math.sqrt(num); i++) {
        if (num % i === 0) return false;
    }
    return true;
}

const primeIterator = primeNumbersIterator(2, 100);
let count = 0;

for (const prime of primeIterator) {
    if (count >= 10) break;
    console.log(prime);
    count++;
}

//!030_8 Розгляньте приклади використання циклу for .. of в вашому власному коді та попробуйте виокремити випадки, коли він є найбільш зручним і ефективним.
// for/of я використовував для перебирання значень обєкту щоб їх вивести або працювати з ними

//!030_9 Дослідіть можливості розгортання ітерованих об'єктів за допомогою оператора розгортання (...). Спробуйте застосувати його до різних типів ітерованих об'єктів.
/*
спред оператор дозволяє розгортати обєкти та розширити доступні для ітерації елементи
наприклад:
const arr1 = [1, 2, 3];
const arr2 = [4, 5, 6];
const text = "Hello";
const letters = [...text]; // ["H", "e", "l", "l", "o"]
console.log([...arr1, ...arr2, letters]);
та інші...
*/

//!030_10 Напишіть короткий огляд з вашими враженнями від вивчення ітераторів в JavaScript.
//! Що ви зрозуміли краще після цього уроку? Які аспекти ви знайшли найбільш корисними або цікавими?
/**
 * На цьому уроці я розібрався з ітераторами. Їхня основна мета - послідовний доступ до елементів обєкта без відкриття їх внутрішньої структури.
 * 
 * ітератор повертає обєкт за допомогою метода next(), який має властивості value та done. 
 * Де value - це значення елемента, а done - це логічне значення, яке вказує, чи є останнім елементом колекції.
 * загалом до проходження цього уроку я знав про ітератори те що їх можна 'перебирати' за допомогою циклів for, for/in, for/of, але дальше не вникав.
 * тепре я зрозумів як вони працюють, як можна створити свій ітератор, та як з цим працювати. Рухаємся далі!
 */